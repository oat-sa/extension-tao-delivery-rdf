{"version":3,"sources":["routes.js","DeliveryMgmt/editDelivery.js","DeliveryMgmt/testtaker.js","../../taoTaskQueue/model/taskQueueModel.js","../../taoTaskQueue/model/taskQueue.js","../../taoTaskQueue/component/button/tpl/report!tpl","../../taoTaskQueue/component/button/css/taskable!css","../../taoTaskQueue/component/button/taskable.js","../../taoTaskQueue/component/button/standardButton.js","DeliveryMgmt/wizard.js","../../../../../../../../../../../onLayerEnd0.js"],"names":["define","DeliveryMgmt","actions","editDelivery","excludeTesttaker","wizard","$","helpers","start","click","delivery","this","data","load","_url","uri","prepend","modal","__","module","section","feedback","switchList","target","current","parent","attr","append","scrollIntoView","timeout","$search","$list","liveSearch","pattern","val","clearTimeout","setTimeout","filterList","RegExp","regex","list","children","each","index","element","text","match","hide","show","excluded","push","assemblyUri","ajax","url","type","JSON","stringify","dataType","success","response","saved","loadContentBlock","keyup","siblings","_","Promise","eventifier","polling","request","hasSameState","task1","task2","status","_defaults","get","archive","all","download","pollSingleIntervals","iteration","interval","pollAllIntervals","config","model","_cache","singlePollings","getPollSingleIntervals","isArray","cloneDeep","getPollAllIntervals","defaults","setEndpoints","urls","assign","taskId","TypeError","then","taskData","id","trigger","reject","Error","catch","err","getAll","limit","newCache","forEach","task","difference","keys","res","pollAll","immediate","self","loop","pollingIntervals","_updateInterval","pollingInstance","pollingInterval","shift","setInterval","globalPolling","action","statusArr","done","async","taskDataArray","map","indexOf","resolve","next","pollAllStop","stop","pollSingle","poll","finished","pollSingleStop","create","taskCreate","creationResult","result","extra","fileDownload","httpMethod","successCallback","failCallback","urlHelper","taskQueueModelFactory","route","hb","template","Handlebars","depth0","partials","compilerInfo","merge","stack1","helper","buffer","functionType","escapeExpression","title","call","hash","reportFactory","loadingBar","reportTpl","defaultConfig","taskableComponent","setTaskConfig","createTask","taskQueue","requestUrl","requestData","isFunction","taskCreationData","isPlainObject","taskCreationUrl","infoBox","message","hasFile","taskLabel","encodeHtml","info","sourceDom","getElement","displayReport","report","$reportContainer","taskReportContainer","html","icon","label","on","render","find","component","off","loadingButton","makeTaskable","terminate","reset","filterFactory","urlUtils","actionManager","taskCreationButtonFactory","provider","q","page","tests","fail","refreshTree","uriResource","taskCreationButton","$oldSubmitter","$filterContainer","$formElement","$form","$container","closest","placeholder","width","quietMillis","test","enable","disable","params","error","prop","serializeArray","length","replaceWith","css","float","c","d","document","a","i","s","createElement","getElementsByTagName","cssText","createTextNode"],"mappings":"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","file":"routes.js","sourcesContent":["/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014-2017 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n *\n *\n */\n\n//@see http://forge.taotesting.com/projects/tao/wiki/Front_js\ndefine('taoDeliveryRdf/controller/routes',[],function(){\n    'use strict';\n\n    return {\n        'DeliveryMgmt': {\n            'actions' : {\n                'editDelivery'     : 'controller/DeliveryMgmt/editDelivery',\n                'excludeTesttaker' : 'controller/DeliveryMgmt/testtaker',\n                'wizard'           : 'controller/DeliveryMgmt/wizard'\n            }\n        }\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2013 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n *\n *\n */\ndefine('taoDeliveryRdf/controller/DeliveryMgmt/editDelivery',['jquery', 'helpers', 'ui/modal'],\nfunction ($, helpers) {\n    'use strict';\n\n    return {\n        start : function(){\n            $('#exclude-btn').click(function() {\n                var delivery = $(this).data('delivery');\n                $('#testtaker-form').load(helpers._url('excludeTesttaker', 'DeliveryMgmt', 'taoDeliveryRdf', {'uri' : delivery}), function() {\n                    $('body').prepend($('#modal-container'));\n                    $('#testtaker-form').modal();\n                });\n            });\n        }\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2013 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n *\n *\n */\ndefine('taoDeliveryRdf/controller/DeliveryMgmt/testtaker',['jquery', 'i18n', 'helpers', 'module', 'layout/section', 'ui/feedback'], \nfunction ($, __, helpers, module, section, feedback) {\n    'use strict';\n\n\tfunction switchList() {\n\t\tvar current = $(this).parent().attr('id');\n        var target; \n\t\tif (current == 'excludedList') {\n\t\t\ttarget = $('#assignedList'); \n\t\t} else if (current == 'assignedList') {\n\t\t\ttarget = $('#excludedList');\n\t\t}\n\t\tif (typeof target !== 'undefined') {\n\t\t\ttarget.append(this);\n\t\t\tthis.scrollIntoView();\n\t\t}\n\t}\n\t\n\tvar $search = $('#tt-filter');\n    var $list   = $('#assignedList');\n    var timeout;\n    \n    var liveSearch = function(){\n        var pattern = $search.val();\n        clearTimeout(timeout);\n        timeout = setTimeout(function(){\n        \tfilterList(new RegExp(pattern), $list);\n        }, 300);\n    };\n    \n    var filterList = function(regex, list) {\n    \tlist.children().each(function(index, element) {\n    \t\tif ($(element).text().match(regex) === null) {\n    \t\t\t$(element).hide();\n    \t\t} else {\n    \t\t\t$(element).show();\n    \t\t}\n    \t});\n    };\n\t\n    return {\n        start : function(){\n\t        $('#save-tt').click(function() {\n\t        \tvar excluded = [];\n\t        \t$('#excludedList > li').each(function(index) {\n\t        \t\texcluded.push($(this).data('uri'));\n\t        \t});\n\t        \tvar assemblyUri = $('input[name=\"assemblyUri\"]').val();\n\t        \t$.ajax({\n\t        \t\turl: helpers._url('saveExcluded', 'DeliveryMgmt', 'taoDeliveryRdf'),\n\t\t\t\t\ttype: \"POST\",\n\t\t\t\t\tdata: {\n\t\t\t\t\t\turi: assemblyUri,\n\t\t\t\t\t\texcluded: JSON.stringify(excluded)\n\t\t\t\t\t},\n\t\t\t\t\tdataType: 'json',\n\t\t\t\t\tsuccess: function(response) {\n\t\t\t\t\t\tif (response.saved) {\n                            feedback().success(__('Selection saved successfully'));\n                            section.loadContentBlock(helpers._url('editDelivery', 'DeliveryMgmt', 'taoDeliveryRdf'), {uri: assemblyUri});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t        });\n        \t$('#assignedList > li').click(switchList);\n        \t$('#excludedList > li').click(switchList);\n        \t\n        \t$('#close-tt').click(function() {\n        \t\t$('#testtaker-form').modal('close');\n        \t});\n                \n            //trigger the search on keyp and on the magnifer button click\n            $search.keyup(liveSearch).siblings('.ctrl').click(liveSearch);\n        \t\n        }\n    };\n});\n\n\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * @example\n * taskQueueModelFactory({\n *        url : {\n *            get: urlHelper.route('get', 'TaskQueueWebApi', 'taoTaskQueue'),\n *            archive: urlHelper.route('archive', 'TaskQueueWebApi', 'taoTaskQueue'),\n *            all : urlHelper.route('getAll', 'TaskQueueWebApi', 'taoTaskQueue'),\n *            download : urlHelper.route('download', 'TaskQueueWebApi', 'taoTaskQueue')\n *        },\n *        pollSingleIntervals : [\n *            {iteration: 4, interval:1000},\n *        ],\n *        pollAllIntervals : [\n *            {iteration: 0, interval:5000},\n *        ]\n *    }).pollAll()\n */\ndefine('taoTaskQueue/model/taskQueueModel',[\n    'jquery',\n    'lodash',\n    'core/promise',\n    'core/eventifier',\n    'core/polling',\n    'core/dataProvider/request',\n    'jquery.fileDownload'\n], function ($, _, Promise, eventifier, polling, request) {\n    'use strict';\n\n    var _defaults = {\n        url : {\n            get: '',\n            archive: '',\n            all : '',\n            download : ''\n        },\n        pollSingleIntervals : [\n            {iteration: 4, interval:1000},\n        ],\n        pollAllIntervals : [\n            {iteration: 10, interval:5000},\n            {iteration: 0, interval:10000}//infinite\n        ]\n    };\n\n    /**\n     * Check if two tasks have equivalent task status\n     * @param {Object} task1 - a task object to be compared\n     * @param {Object} task2 - another task object to be compared\n     * @returns {Boolean}\n     */\n    function hasSameState(task1, task2){\n        if(task1.status === task2.status){\n            return true;\n        }else if(task1.status === 'created' || task1.status === 'in_progress'){\n            return  (task2.status === 'created' || task2.status === 'in_progress');\n        }\n        return false;\n    }\n\n    /**\n     * Create a task queue model to communicates with the server REST API\n     *\n     * @param {Object} config\n     * @param {Object} config.url - the list of server endpoints\n     * @param {String} config.url.get - the url to get the status log for a single task\n     * @param {String} config.url.archive - the url to archive a task\n     * @param {String} config.url.all - the url to get the status for all tasks for the current user\n     * @param {String} config.url.download - the url to download a file created by the task\n     * @param {Array} config.pollSingleIntervals - the array of poll intervals that will be used to regulate the polling speed for a simple task\n     *         e.g. {iteration: 4, interval:1000} means that it will poll up to four times every 1000ms.\n     * @param {Array} config.pollAllIntervals - the array of poll intervals that will be used to regulate the main polling speed.\n     *         e.g. {iteration: 10, interval:1000} means that it will poll up to 10 times every 5000ms.\n     *         e.g. {iteration: 0, interval:10000} means that it will poll up to 10000ms indefinitely\n     *\n     * @return {taskQueueModel}\n     */\n    return function taskQueueModel(config) {\n\n        var model;\n\n        /**\n         * cached array of task data\n         * @type {Object}\n         */\n        var _cache;\n\n        /**\n         * store instance of single polling\n         * @type {Object}\n         */\n        var singlePollings = {};\n\n        var getPollSingleIntervals = function getPollSingleIntervals(){\n            if(config.pollSingleIntervals && _.isArray(config.pollSingleIntervals)){\n                return _.cloneDeep(config.pollSingleIntervals);\n            }\n        };\n\n        var getPollAllIntervals = function getPollAllIntervals(){\n            if(config.pollAllIntervals && _.isArray(config.pollAllIntervals)){\n                return _.cloneDeep(config.pollAllIntervals);\n            }\n        };\n\n        config = _.defaults(config || {}, _defaults);\n\n        /**\n         * @typedef taskQueueModel - central model to query the backend's REST API for task queue\n         */\n        model = eventifier({\n\n            /**\n             * Modify the task queue REST API endpoints\n             * @param urls - the new endpoints\n             * @returns {taskQueueModel}\n             */\n            setEndpoints : function setEndpoints(urls){\n                _.assign(config.url, urls || {});\n                return this;\n            },\n\n            /**\n             * Get the status of a task identified by its unique task id\n             *\n             * @param {String} taskId - unique task identifier\n             * @returns {Promise}\n             */\n            get : function get(taskId){\n                var status;\n\n                if(!config.url || !config.url.get){\n                    throw new TypeError('config.url.get is not configured while get() is being called');\n                }\n\n                status = request(config.url.get, {taskId: taskId}, 'GET', {}, true)\n                    .then(function(taskData){\n                        //check taskData\n                        if(taskData && taskData.status){\n                            if(_cache){\n                                //detect change\n                                if(!_cache[taskData.id]){\n                                    model.trigger('singletaskadded', taskData);\n                                }else if(!hasSameState(_cache[taskData.id], taskData)){\n                                    //check if the status has changed\n                                    model.trigger('singletaskstatuschange', taskData);\n                                }\n                            }else{\n                                _cache = {};\n                            }\n                            _cache[taskData.id] = taskData;\n                            return taskData;\n                        }\n                        return Promise.reject(new Error('failed to get task data'));\n                    });\n\n                status.catch(function(err){\n                    model.trigger('error', err);\n                });\n\n                return status;\n            },\n\n            /**\n             * Get the status of all task identified by their unique task id\n             *\n             * @returns {Promise} - resolved when the server response has been received\n             */\n            getAll : function getAll(){\n                var status;\n\n                if(!config.url || !config.url.all){\n                    throw new TypeError('config.url.all is not configured while getAll() is being called');\n                }\n\n                status = request(config.url.all, {limit: 100}, 'GET', {}, true)\n                    .then(function(taskData){\n                        var newCache = {};\n                        //check taskData\n                        if(taskData){\n                            if(_cache){\n                                //detect change\n                                _.forEach(taskData, function(task){\n                                    var id = task.id;\n                                    if(!_cache[id]){\n                                        model.trigger('multitaskadded', task);\n                                    }else if(!hasSameState(_cache[id], task)){\n                                        //check if the status has changed\n                                        model.trigger('multitaskstatuschange', task);\n                                    }\n                                    newCache[id] = task;\n                                });\n                                _.forEach(_.difference(_.keys(_cache), _.keys(newCache)), function(id){\n                                    model.trigger('taskremoved', _cache[id]);\n                                });\n                            }else{\n                                _.forEach(taskData, function(task){\n                                    newCache[task.id] = task;\n                                });\n                            }\n                            //update local cache\n                            _cache = newCache;\n\n                            return taskData;\n                        }\n                        return Promise.reject(new Error('failed to get all task data'));\n                    });\n\n                status.catch(function(err){\n                    model.trigger('error', err);\n                });\n\n                return status;\n            },\n\n            /**\n             * Remove a task identified by its unique task id\n             *\n             * @param {String} taskId - the task id\n             * @returns {Promise} - resolved when achive action done\n             */\n            archive : function archive(taskId){\n\n                var status;\n\n                if(!config.url || !config.url.archive){\n                    throw new TypeError('config.url.archive is not configured while archive() is being called');\n                }\n\n                status = request(config.url.archive, {taskId : taskId}, 'GET', {}, true);\n\n                status.catch(function(res){\n                    model.trigger('error', res);\n                });\n\n                return status;\n            },\n\n            /**\n             * Poll status for all tasks\n             * @param {Boolean} [immediate] - tells if the polling should immediately start (otherwise, will wait until the next iteration)\n             * @returns {taskQueueModel}\n             */\n            pollAll : function pollAll(immediate){\n\n                var self = this;\n                var loop = 0;\n                var pollingIntervals = getPollAllIntervals();\n\n                /**\n                 * gradually increase the polling interval to ease server load\n                 * @private\n                 * @param {Object} pollingInstance - a poll object\n                 */\n                var _updateInterval = function _updateInterval(pollingInstance){\n                    var pollingInterval;\n                    if(loop){\n                        loop --;\n                    }else{\n                        pollingInterval = pollingIntervals.shift();\n                        if(pollingInterval && typeof pollingInterval.iteration !== 'undefined' && pollingInterval.interval){\n                            loop = pollingInterval.iteration;\n                            pollingInstance.setInterval(pollingInterval.interval);\n                        }\n                    }\n                };\n\n                if(!config.url || !config.url.all){\n                    throw new TypeError('config.url.all is not configured while pollAll() is being called');\n                }\n\n                if(!this.globalPolling){\n                    //no global polling yet, create one\n                    this.globalPolling = polling({\n                        action: function action() {\n                            // get into asynchronous mode\n                            var done = this.async();\n                            var statusArr;\n                            model.getAll().then(function(taskDataArray){\n                                model.trigger('pollAll', taskDataArray);\n\n                                //smart polling: stop polling when there is no task in progress\n                                statusArr = _.map(taskDataArray, 'status');\n                                if(statusArr.indexOf('in_progress') === -1 && statusArr.indexOf('created') === -1){\n                                    return done.reject();\n                                }\n\n                                _updateInterval(self.globalPolling);\n                                done.resolve();\n                            }).catch(function(){\n                                done.reject();\n                            });\n                        }\n                    });\n                    _updateInterval(this.globalPolling);\n                    this.globalPolling.start();\n                    this.trigger('pollAllStart');\n                }else{\n                    this.globalPolling.start();\n                    this.trigger('pollAllStart');\n                }\n\n                if(immediate){\n                    //if it is request to immediate start polling, start it now\n                    this.globalPolling.next();\n                }\n\n                return model;\n            },\n\n            /**\n             * Stop the main polling action\n             * @returns {taskQueueModel}\n             */\n            pollAllStop : function pollAllStop(){\n                if(this.globalPolling){\n                    this.globalPolling.stop();\n                    this.trigger('pollAllStop');\n                }\n                return this;\n            },\n\n            /**\n             * Start a single fast polling for a single task id\n             * @param {String} taskId - the task id\n             * @returns {Promise} resolved when the single polling action finishes\n             */\n            pollSingle : function pollSingle(taskId){\n\n                var self = this;\n                var loop = 0;\n\n                var pollingIntervals = getPollSingleIntervals();\n\n                /**\n                 * gradually increase the polling interval to ease server load\n                 * @private\n                 * @param {Object} pollingInstance - a poll object\n                 */\n                var _updateInterval = function _updateInterval(pollingInstance){\n                    var pollingInterval;\n                    if(loop){\n                        loop --;\n                        return true;//continue polling\n                    }else{\n                        pollingInterval = pollingIntervals.shift();\n                        if(pollingInterval && pollingInterval.iteration && pollingInterval.interval){\n                            loop = pollingInterval.iteration;\n                            pollingInstance.setInterval(pollingInterval.interval);\n                            return true;//continue polling\n                        }else{\n                            //stop polling\n                            return false;\n                        }\n                    }\n                };\n\n                if(!config.url || !config.url.get){\n                    throw new TypeError('config.url.get is not configured while pollSingle() is being called');\n                }\n\n                if(singlePollings[taskId]){\n                    singlePollings[taskId].stop();\n                }\n\n                return new Promise(function(resolve){\n                    var poll = polling({\n                        action: function action() {\n                            // get into asynchronous mode\n                            var done = this.async();\n                            self.get(taskId).then(function(taskData){\n                                if(taskData.status === 'completed' || taskData.status === 'failed'){\n                                    //the status status could be either \"completed\" or \"failed\"\n                                    poll.stop();\n                                    self.trigger('pollSingleFinished', taskId, taskData);\n                                    resolve({finished: true, task: taskData});\n                                }else if(!_updateInterval(poll)){\n                                    //if we have reached the end of the total polling config\n                                    self.trigger('pollSingleFinished', taskId, taskData);\n                                    resolve({finished: false, task: taskData});\n                                }else{\n                                    self.trigger('pollSingle', taskId, taskData);\n                                    done.resolve();//go to next poll iteration\n                                }\n\n                            }).catch(function(){\n                                done.reject();\n                            });\n                        }\n                    });\n                    _updateInterval(poll);\n                    singlePollings[taskId] = poll.start();\n                    self.trigger('pollSingleStart', taskId);\n                });\n            },\n\n            /**\n             * Interrupt a single polling action\n             * @param {String} taskId - the task id\n             * @returns {model}\n             */\n            pollSingleStop : function pollSingleStop(taskId){\n                if(singlePollings && singlePollings[taskId]){\n                    singlePollings[taskId].stop();\n                    this.trigger('pollSingleStop', taskId);\n                }\n                return this;\n            },\n\n            /**\n             * Call a task creation url\n             * @param {String} url - the server side task queue creation service\n             * @param {Object} [data] - request data\n             * @returns {promise} - resolved when task creation response is sent back by the server\n             */\n            create : function create(url, data){\n                var taskCreate, self = this;\n                taskCreate = request(url, data, 'POST', {}, true)\n                    .then(function(creationResult){\n                        //poll short result:\n                        if(creationResult && creationResult.task && creationResult.task.id){\n                            self.trigger('created', creationResult);\n                            return self.pollSingle(creationResult.task.id).then(function(result){\n                                if(creationResult.extra){\n                                    result.extra = creationResult.extra;\n                                }\n                                if(result.finished){\n                                    //send to queue\n                                    self.trigger('fastFinished', result);\n                                }else{\n                                    //send to queue\n                                    self.trigger('enqueued', result);\n                                }\n                                return result;\n                            });\n                        }\n                        return Promise.reject(new Error('failed to get task data'));\n                    });\n\n                taskCreate.catch(function(err){\n                    model.trigger('error', err);\n                });\n\n                return taskCreate;\n            },\n\n            /**\n             * Call the task result file download endpoint\n             * @param {String} taskId - the task id\n             * @returns {promise} - resolved when the download popup is shown\n             */\n            download : function download(taskId){\n\n                if(!config.url || !config.url.download){\n                    throw new TypeError('config.url.download is not configured while download() is being called');\n                }\n\n                return new Promise(function(resolve, reject){\n                    $.fileDownload(config.url.download, {\n                        httpMethod: 'POST',\n                        data: {taskId : taskId},\n                        successCallback : function(result){\n                            resolve(result);\n                        },\n                        failCallback: function (err) {\n                            reject(err);\n                        }\n                    });\n                });\n            }\n        });\n\n        return model;\n    };\n});\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\ndefine('taoTaskQueue/model/taskQueue',[\n    'util/url',\n    'taoTaskQueue/model/taskQueueModel'\n], function (urlHelper, taskQueueModelFactory) {\n    'use strict';\n\n    /**\n     * Returns the singleton task queue preconfigured with the tao task queue REST API.\n     */\n    return taskQueueModelFactory({\n        url : {\n            get: urlHelper.route('get', 'TaskQueueWebApi', 'taoTaskQueue'),\n            archive: urlHelper.route('archive', 'TaskQueueWebApi', 'taoTaskQueue'),\n            all : urlHelper.route('getAll', 'TaskQueueWebApi', 'taoTaskQueue'),\n            download : urlHelper.route('download', 'TaskQueueWebApi', 'taoTaskQueue')\n        },\n        pollSingleIntervals : [\n            {iteration: 3, interval:1000}\n        ],\n        pollAllIntervals : [\n            {iteration: 1, interval:8000},\n            {iteration: 0, interval:5000}\n        ]\n    });\n});\n","\ndefine('tpl!taoTaskQueue/component/button/tpl/report', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div class=\\\"task-report-container\\\">\\n    <div class=\\\"section-header flex-container-full\\\">\\n        <h2>\";\n  if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</h2>\\n    </div>\\n    <div class=\\\"main-container flex-container-full report\\\"></div>\\n</div>\";\n  return buffer;\n  });\n});\n\n","\ndefine('css!taoTaskQueue/component/button/css/taskable',[],function(){});\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA;\n */\n\n/**\n * Add the task creation capability to a component\n *\n * @example\n * makeTaskable(component)\n *    .setTaskConfig({\n *        taskQueue : taskQueue,\n *        taskCreationUrl : 'the/url/to/task/creation/service',\n *        taskCreationData : function(){\n *            return {some: 'data'};\n *        }\n *    }).createTask();\n *\n * @author Sam <sam@taotesting.com>\n */\ndefine('taoTaskQueue/component/button/taskable',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'core/promise',\n    'ui/report',\n    'ui/feedback',\n    'layout/loading-bar',\n    'tpl!taoTaskQueue/component/button/tpl/report',\n    'css!taoTaskQueue/component/button/css/taskable',\n], function ($, _, __, Promise, reportFactory, feedback, loadingBar, reportTpl) {\n    'use strict';\n\n    var defaultConfig = {\n    };\n\n    var taskableComponent = {\n\n        /**\n         * Set configuration for task creation\n         * @param config\n         * @returns {taskableComponent}\n         */\n        setTaskConfig : function setTaskConfig(config){\n            _.assign(this.config, config);\n            return this;\n        },\n\n        /**\n         * Create a task\n         * @param requestUrl\n         * @param requestData\n         */\n        createTask : function createTask(){\n            var self = this;\n            var taskQueue,\n                requestUrl,\n                requestData = {};\n\n            //prepare the request parameter if applicable\n            if(_.isFunction(this.config.taskCreationData)){\n                requestData = this.config.taskCreationData.call(this);\n            }else if(_.isPlainObject(this.config.taskCreationData)){\n                requestData = this.config.taskCreationData;\n            }\n\n            if(!this.config.taskCreationUrl){\n                return this.trigger('error', 'the request url is required to create a task');\n            }\n            requestUrl = this.config.taskCreationUrl;\n\n            if(!this.config.taskQueue){\n                return this.trigger('error', 'the taskQueue model is required to create a task');\n            }\n            taskQueue = this.config.taskQueue;\n\n            loadingBar.start();\n            taskQueue.pollAllStop();\n            taskQueue.create(requestUrl, requestData).then(function (result) {\n                var infoBox,\n                    message,\n                    task = result.task;\n\n                if (result.finished) {\n                    if(task.hasFile){\n                        //download if its is a export-typed task\n                        taskQueue.download(task.id).then(function(){\n                            //immediately archive the finished task as there is no need to display this task in the queue list\n                            return taskQueue.archive(task.id);\n                        }).then(function () {\n                            self.trigger('finished', result);\n                            taskQueue.pollAll();\n                        }).catch(function(err){\n                            self.trigger('error', err);\n                            taskQueue.pollAll();\n                        });\n                    }else{\n                        //immediately archive the finished task as there is no need to display this task in the queue list\n                        taskQueue.archive(task.id).then(function(){\n                            self.trigger('finished', result);\n                            taskQueue.pollAll();\n                        }).catch(function(err){\n                            self.trigger('error', err);\n                            taskQueue.pollAll();\n                        });\n                    }\n                } else {\n                    //enqueuing process:\n                    message = __('<strong> %s </strong> has been moved to the background.', task.taskLabel);\n                    infoBox = feedback(null, {\n                        encodeHtml : false,\n                        timeout : {info: 8000}\n                    }).info(message);\n\n                    taskQueue.trigger('taskcreated', {task : task, sourceDom : infoBox.getElement()});\n                    self.trigger('enqueued', result);\n                }\n                loadingBar.stop();\n            }).catch(function (err) {\n                //in case of error display it and continue task queue activity\n                taskQueue.pollAll();\n                self.trigger('error', err);\n            });\n        },\n\n        /**\n         * prepare the given container to display the final report\n         * @param {Object} report - the standard report object\n         * @param {String} title - the report title\n         * @param {String} result - raw result data from the task creation action\n         */\n        displayReport : function displayReport(report, title, result) {\n            var self = this,\n                $reportContainer;\n\n            if(this.config.taskReportContainer instanceof $){\n                $reportContainer = $(reportTpl({\n                    title: title\n                }));\n\n                this.config.taskReportContainer.html($reportContainer);\n\n                return reportFactory({\n                        actions: [{\n                            id: 'continue',\n                            icon: 'right',\n                            title: 'continue',\n                            label: __('Continue')\n                        }]\n                    }, report)\n                    .on('action-continue', function(){\n                        self.trigger('continue', result);\n                    }).render($reportContainer.find('.report'));\n            }\n        }\n    };\n\n    /**\n     * @param {Component} component - an instance of ui/component\n     * @param {Object} config - task queue creation specific config\n     * @param {Object} config.taskQueue - the task queue model to be used\n     * @param {String} config.taskCreationUrl - endpoint to create a task\n     * @param {Object|Function} [config.taskCreationData] - the parameters that will be send to the task creation request\n     * @param {JQuery} [config.taskReportContainer] - the container where the inline report can be printed to\n     * @return {taskableComponent}\n     */\n    return function makeTaskable(component, config) {\n        _.assign(component, taskableComponent);\n\n        /**\n         * @typedef {ui/component} taskableComponent\n         */\n        return component\n            .off('.taskable')\n            .on('init.taskable', function() {\n                _.defaults(this.config, config || {}, defaultConfig);\n            });\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA;\n */\n\n/**\n * Component to create a simple button that will command task creation\n *\n * @example minimal example to build a task\n * standardTaskButtonFactory({\n *    type : 'info',\n *    icon : 'delivery',\n *    title : __('Publish the test'),\n *    label : __('Publish'),\n *    taskQueue : taskQueue,\n *    taskCreationUrl : 'the/url/to/task/creation/service'\n * }).render($container);\n *\n * @example simple example to build a task with additional request params\n * standardTaskButtonFactory({\n *    type : 'info',\n *    icon : 'delivery',\n *    title : __('Publish the test'),\n *    label : __('Publish'),\n *    taskQueue : taskQueue,\n *    taskCreationUrl : 'the/url/to/task/creation/service',\n *    taskCreationData : {foo : 'bar}\n * }).render($container);\n *\n * @example full example using taskCreationData as a function and taskReportContainer to display the report in\n * standardTaskButtonFactory({\n *    type : 'info',\n *    icon : 'delivery',\n *    title : __('Publish the test'),\n *    label : __('Publish'),\n *    taskQueue : taskQueue,\n *    taskCreationUrl : $form.prop('action'),\n *    taskCreationData : function getTaskCreationData(){\n *        return $form.serializeArray();\n *    },\n *    taskReportContainer : $container\n * }).render($container);\n */\ndefine('taoTaskQueue/component/button/standardButton',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'core/promise',\n    'ui/report',\n    'ui/feedback',\n    'layout/loading-bar',\n    'ui/loadingButton/loadingButton',\n    'taoTaskQueue/component/button/taskable'\n], function ($, _, __, Promise, reportFactory, feedback, loadingBar, loadingButton, makeTaskable) {\n    'use strict';\n\n    var defaultConfig = {\n    };\n\n    /**\n     * Builds a standard task creation button\n     *\n     * @param {Object} config - the component config\n     * @param {String} config.type - the icon type (info, success, error)\n     * @param {String} config.icon - the button icon\n     * @param {String} config.label - the button's label\n     * @param {String} [config.title] - the button's title\n     * @param {String} [config.terminatedLabel] - the button's label when terminated\n     * @param {Object} config.taskQueue - the task queue model to be used\n     * @param {String} config.taskCreationUrl - endpoint to create a task\n     * @param {Object|Function} [config.taskCreationData] - the parameters that will be send to the task creation request\n     * @param {JQuery} [config.taskReportContainer] - the container where the inline report can be printed to\n     * @returns {standardTaskButton} the component\n     *\n     * @event started - Emitted when the button is clicked and the triggered action supposed to be started\n     * @event terminated - Emitted when the button action is stopped, interrupted\n     * @event reset - Emitted when the button revert from the terminated stated to the initial one\n     * @event finished - When task is finished within the polling duration allowed by the task queue model\n     * @event enqueued - when task has not time to finish within the polling duration allowed by the task queue model\n     */\n    return function standardTaskButtonFactory(config) {\n\n        var component;\n\n        //prepare the config and\n        config = _.defaults(config || {}, defaultConfig);\n\n        //create the base loading button and make it taskable\n        component = makeTaskable(loadingButton(config));\n\n        /**\n         * The component\n         * @typedef {ui/component} standardTaskButton\n         */\n        return component.on('started', function(){\n            this.createTask();\n        }).on('finished', function(){\n            this.terminate().reset();\n        }).on('enqueued', function(){\n            this.terminate().reset();\n        });\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n *\n */\ndefine('taoDeliveryRdf/controller/DeliveryMgmt/wizard',[\n    'lodash',\n    'jquery',\n    'i18n',\n    'ui/filter',\n    'ui/feedback',\n    'util/url',\n    'layout/actions',\n    'core/promise',\n    'taoTaskQueue/model/taskQueue',\n    'taoTaskQueue/component/button/standardButton'\n], function (_, $, __, filterFactory, feedback, urlUtils, actionManager, Promise, taskQueue, taskCreationButtonFactory) {\n    'use strict';\n\n    var provider = {\n\n        /**\n         * List available tests\n         * @returns {Promise}\n         */\n        list: function list(data) {\n            return new Promise(function (resolve, reject) {\n                $.ajax({\n                    url: urlUtils.route('getAvailableTests', 'DeliveryMgmt', 'taoDeliveryRdf'),\n                    data: {\n                        q: data.q,\n                        page: data.page\n                    },\n                    type: 'GET',\n                    dataType: 'JSON'\n                }).done(function (tests) {\n                    if (tests) {\n                        resolve(tests);\n                    } else {\n                        reject(new Error(__('Unable to load tests')));\n                    }\n                }).fail(function () {\n                    reject(new Error(__('Unable to load tests')));\n                });\n            });\n        }\n    };\n\n    /**\n     * wrapped the old jstree API used to refresh the tree and optionally select a resource\n     * @param {String} [uriResource] - the uri resource node to be selected\n     */\n    var refreshTree = function refreshTree(uriResource){\n        actionManager.trigger('refresh', {\n            uri : uriResource\n        });\n    };\n\n    return {\n        start: function () {\n            var $filterContainer = $('.test-select-container');\n            var $formElement = $('#test');\n            var $form = $('#simpleWizard');\n            var $container = $form.closest('.content-block');\n            var taskCreationButton, $oldSubmitter;\n\n            filterFactory($filterContainer, {\n                placeholder: __('Select the test you want to publish to the test-takers'),\n                width: '64%',\n                quietMillis: 1000,\n                label: __('Select the test')\n            }).on('change', function (test) {\n                $formElement.val(test);\n                if(test){\n                    taskCreationButton.enable();\n                }else{\n                    taskCreationButton.disable();\n                }\n            }).on('request', function (params) {\n                provider\n                    .list(params.data)\n                    .then(function (tests) {\n                        params.success(tests);\n                    })\n                    .catch(function (err) {\n                        params.error(err);\n                        feedback().error(err);\n                    });\n            }).render('<%= text %>');\n\n            //find the old submitter and replace it with the new component\n            $oldSubmitter = $form.find('.form-submitter');\n            taskCreationButton = taskCreationButtonFactory({\n                type : 'info',\n                icon : 'delivery',\n                title : __('Publish the test'),\n                label : __('Publish'),\n                taskQueue : taskQueue,\n                taskCreationUrl : $form.prop('action'),\n                taskCreationData : function getTaskCreationData(){\n                    return $form.serializeArray();\n                },\n                taskReportContainer : $container\n            }).on('finished', function(result){\n                if (result.task\n                    && result.task.report\n                    && _.isArray(result.task.report.children)\n                    && result.task.report.children.length\n                    && result.task.report.children[0]) {\n                    if(result.task.report.children[0].data\n                        && result.task.report.children[0].data.uriResource){\n                        feedback().info(__('%s completed', result.task.taskLabel));\n                        refreshTree(result.task.report.children[0].data.uriResource);\n                    }else{\n                        this.displayReport(result.task.report.children[0], __('Error'));\n                    }\n                }\n            }).on('continue', function(){\n                refreshTree();\n            }).on('error', function(err){\n                //format and display error message to user\n                feedback().error(err);\n            }).render($oldSubmitter.closest('.form-toolbar')).disable();\n\n            //replace the old submitter with the new one and apply its style\n            $oldSubmitter.replaceWith(taskCreationButton.getElement().css({float: 'right'}));\n        }\n    };\n});\n\n","\n(function(c){var d=document,a='appendChild',i='styleSheet',s=d.createElement('style');s.type='text/css';d.getElementsByTagName('head')[0][a](s);s[i]?s[i].cssText=c:s[a](d.createTextNode(c));})\n('div.task-report-container{width:100%}\\n\\n/*# sourceMappingURL=taskable.css.map */');\n"]}